var app = require('../app');
var debug = require('debug')('factorb-iot:server');
var http = require('http');
const SocketIO = require('socket.io');
const moment = require('moment');/*
const { PubSub } = require(`@google-cloud/pubsub`);
const formatMessage = require('../utils/messages');
const { userJoin, getCurrentUser, userLeave, getRoomUsers } = require('../utils/users');

const projectId = 'lukas-lok';
const stateSubscriber = 'factorb-iot-data';

var pubsub = new PubSub({
    projectId: projectId,
});

var subscription = pubsub.subscription('projects/' + projectId + '/subscriptions/' + stateSubscriber);
*/
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

console.log("servidor corriendo en el puerto", port);

var server = http.createServer(app);

/*const io = SocketIO(server);
const botName = 'Server_factorbiot';

io.on('connection', socket => {
    var messageHandler = function(message) {
        
        message.ack();
        
        if(message.attributes.subFolder !== "events"){
            
            let data = Buffer.from(message.data, 'base64').toString('ascii');
            
            try {
              
                let obj = JSON.parse(data);
                //console.log(obj);
                console.log("publicando en el topic: /", message.attributes.deviceId);
                socket.emit(message.attributes.deviceId, obj);
            }
            catch(error) {
              console.log("el paquete no es un json");
            }
            

        }
        else {
          console.log("dispositivo conectado ==> ", message.attributes.deviceId);
        }
    };
    subscription.on('message', messageHandler);
});*/


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
